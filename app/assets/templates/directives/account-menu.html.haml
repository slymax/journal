.sn-component
  .panel#account-panel
    .content

      .panel-section.hero{"ng-if" => "!user && !formData.showLogin && !formData.showRegister && !formData.mfa"}
        %h1.title Sign in or register to enable sync and end-to-end encryption.
        .panel-row
        .panel-row
          .button-group.stretch
            .button.info.featured{"ng-click" => "formData.showLogin = true"}
              .label Sign In
            .button.info.featured{"ng-click" => "formData.showRegister = true"}
              .label Register
        %p
          Standard Notes is free on every platform, and comes standard with sync and encryption.

      .panel-section{"ng-if" => "formData.showLogin || formData.showRegister"}
        %h3.title.panel-row
          {{formData.showLogin ? "Sign In" : "Register"}}

        %form.panel-form{"ng-submit" => "submitAuthForm()"}
          %input{:placeholder => 'Email', "sn-autofocus" => 'true', "should-focus" => "true", :name => 'email', :required => true, :type => 'email', 'ng-model' => 'formData.email'}
          %input{:placeholder => 'Password', :name => 'password', :required => true, :type => 'password', 'ng-model' => 'formData.user_password'}
          %input{:placeholder => 'Confirm Password', "ng-if" => "formData.showRegister", :name => 'password', :required => true, :type => 'password', 'ng-model' => 'formData.password_conf'}

          %a.panel-row.advanced{"ng-click" => "formData.showAdvanced = !formData.showAdvanced"}
            Advanced Options

          .advanced-options.panel-row{"ng-if" => "formData.showAdvanced"}
            %input{:name => 'server', :placeholder => 'Server URL', :required => true, :type => 'text', 'ng-model' => 'formData.url'}

          .button-group.stretch.panel-row.form-submit
            %button.button.info.featured{"type" => "submit"}
              .label {{formData.showLogin ? "Sign In" : "Register"}}

          %label{"ng-if" => "formData.showLogin"}
            %input{"type" => "checkbox", "ng-model" => "formData.strictSignin"}
            Use strict sign in
          %label
            %input{"type" => "checkbox", "ng-model" => "formData.ephemeral", "ng-true-value" => "false", "ng-false-value" => "true"}
            Stay signed in
          %label{"ng-if" => "notesAndTagsCount() > 0"}
            %input{"type" => "checkbox", "ng-model" => "formData.mergeLocal", "ng-bind" => "true", "ng-change" => "mergeLocalChanged()"}
            Merge local data ({{notesAndTagsCount()}} notes)

        %em.block.center-align.mt-10{"ng-if" => "formData.status", "style" => "font-size: 14px;"}
        {{formData.status}}

      .panel-section{"ng-if" => "formData.mfa"}
        %form{"ng-submit" => "submitMfaForm()"}
          %p {{formData.mfa.message}}
          %input.form-control.mt-10{:placeholder => "Enter Code", "sn-autofocus" => "true", "should-focus" => "true", :autofocus => "true", :name => 'mfa', :required => true, 'ng-model' => 'formData.userMfaCode'}
          .button-group.stretch.panel-row.form-submit
            %button.button.info.featured{"type" => "submit"}
              .label Sign In

      %div{"ng-if" => "!formData.showLogin && !formData.showRegister && !formData.mfa"}
        .panel-section{"ng-if" => "user"}
          .panel-row
            %h2.title.wrap {{user.email}}

          .subtitle.subtle.normal {{server}}

          .panel-row

          %a.panel-row.condensed{"ng-click" => "openPasswordWizard('change-pw')"} Change Password

        .panel-section
          %h3.title.panel-row Encryption
          %h5.subtitle.info.panel-row{"ng-if" => "encryptionEnabled()"}
            {{encryptionStatusForNotes()}}
          %p
            {{encryptionStatusString()}}

        .panel-section
          %h3.title.panel-row Passcode Lock
          %div{"ng-if" => "!hasPasscode()"}
            %div{"ng-if" => "canAddPasscode"}
              .panel-row{"ng-if" => "!formData.showPasscodeForm"}
                %a.info{"ng-click" => "addPasscodeClicked(); $event.stopPropagation();"} Add Passcode

              %p Add an app passcode to lock the app and encrypt on-device key storage.

            %div{"ng-if" => "!canAddPasscode"}
              %p Adding a passcode is not supported in temporary sessions. Please sign out, then sign back in with the "Stay signed in" option checked.

          %form{"ng-if" => "formData.showPasscodeForm", "ng-submit" => "submitPasscodeForm()"}
            %input.form-control{:type => 'password', "ng-model" => "formData.passcode", "placeholder" => "Passcode", "sn-autofocus" => "true", "should-focus" => "true"}
            %input.form-control{:type => 'password', "ng-model" => "formData.confirmPasscode", "placeholder" => "Confirm Passcode"}
            .button-group.stretch.panel-row.form-submit
              %button.button.info{"type" => "submit"}
                .label Set Passcode
            %a.panel-row{"ng-click" => "formData.showPasscodeForm = false"} Cancel

          %div{"ng-if" => "hasPasscode() && !formData.showPasscodeForm"}
            .panel-row
              %p
                Passcode lock is enabled.
                %span{"ng-if" => "isDesktopApplication()"} Your passcode will be required on new sessions after app quit.
            .panel-row.justify-left
              .horizontal-group
                %a.info{"ng-click" => "changePasscodePressed()"} Change Passcode
                %a.danger{"ng-click" => "removePasscodePressed()"} Remove Passcode



        .panel-section{"ng-if" => "!importData.loading"}
          %h3.title Data Backups
          %form.panel-form{"ng-if" => "encryptedBackupsAvailable()"}
            .input-group
              %label
                %input{"type" => "radio", "ng-model" => "archiveFormData.encrypted", "ng-value" => "true", "ng-change" => "archiveFormData.encrypted = true"}
                Encrypted
              %label
                %input{"type" => "radio", "ng-model" => "archiveFormData.encrypted", "ng-value" => "false", "ng-change" => "archiveFormData.encrypted = false"}
                Decrypted

          %a.info{"ng-click" => "downloadDataArchive()", "ng-class" => "{'mt-5' : !user}"}Download Backup

          %label.import
            %input{"type" => "file", "style" => "display: none;", "file-change" => "->", "handler" => "importFileSelected(files)"}
            .label Import From Backup

          %span{"ng-if" => "isDesktopApplication()"} Backups are automatically created on desktop and can be managed via the "Backups" top-level menu.

          %div.impass{"ng-if" => "importData.requestPassword"}
            %form.panel-form.stretch{"ng-submit" => "submitImportPassword()"}
              %p Enter the account password associated with the import file.
              %input.form-control.mt-5{:type => 'password', "placeholder" => "Enter File Account Password", "ng-model" => "importData.password", "autofocus" => "true"}
              .button-group.stretch.panel-row.form-submit
                %button.button.info{"type" => "submit"}
                  .label Decrypt & Import
          %a.right{"ng-if" => "formData.showLogin || formData.showRegister", "ng-click" => "formData.showLogin = false; formData.showRegister = false;"}
            Cancel
          %a.right{"ng-if" => "!formData.showLogin && !formData.showRegister", "ng-click" => "destroyLocalData()"} Clear Local Data
